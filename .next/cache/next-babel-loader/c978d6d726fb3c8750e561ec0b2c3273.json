{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// redux/reducers/fooReducer.js\nimport { INCREMENT, DECREMENT } from '../actions/actionTypes';\nconst initialState = {\n  count: 0\n};\n\nconst countReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return _objectSpread({}, state, {\n        count: state.count + 1\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default countReducer;","map":{"version":3,"sources":["/Users/rahulbhate/projects/react-redux-next/redux/reducers/countReducer.js"],"names":["INCREMENT","DECREMENT","initialState","count","countReducer","state","action","type"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAAUA,SAAV,EAAqBC,SAArB,QAAsC,wBAAtC;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;;AAGA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAyBI,MAAzB,KAAoC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,SAAL;AACI,+BAAYK,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAxC;;AACJ;AACI,aAAOE,KAAP;AAJR;AAMH,CAPD;;AASA,eAAeD,YAAf","sourcesContent":["// redux/reducers/fooReducer.js\nimport  { INCREMENT, DECREMENT } from '../actions/actionTypes';\nconst initialState = {\n    count: 0\n}\nconst countReducer = (state = initialState  , action) => {\n    switch (action.type) {\n        case INCREMENT:\n            return { ...state, count: state.count + 1 };\n        default:\n            return state;\n    }\n};\n\nexport default countReducer;"]},"metadata":{},"sourceType":"module"}